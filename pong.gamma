external_fn SDL_SetMainReady(): void
external_fn SDL_Init(flags: u32): i32
external_fn SDL_Quit(): void
external_fn SDL_CreateWindow(title: ^u8, x: i32, y: i32, w: i32, h: i32, flags: u32): ^void
external_fn SDL_DestroyWindow(window: ^void): void
external_fn SDL_Delay(ms: u32): void
external_fn SDL_PollEvent(event: ^SDL_Event): i32
external_fn SDL_CreateRenderer(window: ^void, index: i32, flags: u32): ^void
external_fn SDL_DestroyRenderer(renderer: ^void): void
external_fn SDL_SetRenderDrawColor(renderer: ^void, r: u8, g: u8, b: u8, a: u8): i32
external_fn SDL_RenderClear(renderer: ^void): i32
external_fn SDL_RenderPresent(renderer: ^void): void
external_fn SDL_RenderDrawRect(renderer: ^void, rect: ^SDL_Rect): i32
external_fn SDL_RenderFillRect(renderer: ^void, rect: ^SDL_Rect): i32
external_fn SDL_GetTicks64(): u64

layout SDL_Event
  type: 0 u32
  timestamp: 4 u32
  window_event_id: 12 u32

  key: 0 SDL_KeyboardEvent

  padding: 0 [56]u8 # Make sure that the size of the struct matches the original
end

layout SDL_KeyboardEvent
  state: 12 u8
  repeat: 13 u8
  padding: 14 [2]u8
  keysym: 16 SDL_Keysym
end

layout SDL_Keysym
  scancode: 0 i32
  sym: 4 i32 
  mod: 8 u16
  unused: 10 u32
end

layout SDL_Rect
  x:  0 i32
  y:  4 i32
  w:  8 i32
  h: 12 i32
end

layout Ball
  x:   0 i32
  y:   4 i32
  vx:  8 i32
  vy: 12 i32
end

layout Game
  y0:   0 i32
  y1:   4 i32
  ball: 8 Ball
end

fn main(): i32
  # Constants
  # ---------

  let EVENT_QUIT:            u32 = 256
  let EVENT_WINDOW:          u32 = 512
  let EVENT_KEYDOWN:         u32 = 0x300
  let EVENT_KEYUP:           u32 = 0x301
  let WINDOW_CLOSE:          u32 = 14
  let INIT_EVERYTHING:       u32 = 62001
  let WINDOWPOS_CENTERED:    i32 = 805240832
  let RENDERER_PRESENTVSYNC: u32 = 4
  let RENDERER_ACCELERATED:  u32 = 2
  let KEY_W:                 i32 = 119
  let KEY_S:                 i32 = 115

  (SDL_SetMainReady)
  let status: i32 = (SDL_Init INIT_EVERYTHING)
  if (ne status 0)
    return -1
  end

  let window:   ^void = (SDL_CreateWindow (cast ^u8 (cast u64 0)) WINDOWPOS_CENTERED WINDOWPOS_CENTERED 800 800 0)
  if (eq window (cast ^void 0))
    return -2
  end

  let renderer: ^void = (SDL_CreateRenderer window -1 (bor RENDERER_ACCELERATED RENDERER_PRESENTVSYNC))
  if (eq renderer (cast ^void 0))
    return -3
  end

  let game: Game
  set game.y0      = 400
  set game.y1      = 400
  set game.ball.x  = 400
  set game.ball.y  = 400
  set game.ball.vx = 4
  set game.ball.vy = 4

  let field: SDL_Rect
  set field.x = 0
  set field.y = 0
  set field.w = 800
  set field.h = 800

  let button_down0: bool = false
  let button_down1: bool = false
  let button_up0: bool = false
  let button_up1: bool = false

  loop @game_loop
    loop
      let event: SDL_Event
      let has_more_events: i32 = (SDL_PollEvent (& event))
      if (not (cast bool has_more_events))
        break
      end

      if (eq event.type EVENT_QUIT)
        break @game_loop
      end

      if (eq event.type EVENT_KEYDOWN)
        if (eq event.key.keysym.sym KEY_W) set button_up1   = true end
        if (eq event.key.keysym.sym KEY_S) set button_down1 = true end
      end

      if (eq event.type EVENT_KEYUP)
        if (eq event.key.keysym.sym KEY_W) set button_up1   = false end
        if (eq event.key.keysym.sym KEY_S) set button_down1 = false end
      end
    end

    if button_up1   set game.y0 = (+ game.y0 1) end
    if button_down1 set game.y0 = (- game.y0 1) end

    (SDL_SetRenderDrawColor renderer 0 0 0 0)
    (SDL_RenderClear        renderer)

    (SDL_SetRenderDrawColor renderer 255 255 255 255)

    let r: SDL_Rect
    set r.x = 10
    set r.y = game.y0
    set r.w = 20
    set r.h = 80

    (SDL_RenderFillRect renderer (& r))

    set game.ball.x = (+ game.ball.x game.ball.vx)
    set game.ball.y = (+ game.ball.y game.ball.vy)

    if (or (gt game.ball.x 800) 
           (lt game.ball.x 0))
      set game.ball.vx = (* -1 game.ball.vx)
    end

    if (or (gt game.ball.y 800) 
           (lt game.ball.y 0))
      set game.ball.vy = (* -1 game.ball.vy)
    end

    let r: SDL_Rect
    set r.x = game.ball.x
    set r.y = game.ball.y
    set r.w = 20
    set r.h = 20
    (SDL_RenderFillRect renderer (& r))

    (SDL_RenderPresent renderer)
  end

  (SDL_DestroyRenderer renderer)
  (SDL_DestroyWindow window)
  (SDL_Quit)
  
  return 0
end
