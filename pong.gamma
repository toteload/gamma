external_fn SDL_SetMainReady(): void
external_fn SDL_Init(flags: u32): i32
external_fn SDL_CreateWindow(title: ^u8, x: i32, y: i32, w: i32, h: i32, flags: u32): ^void
external_fn SDL_DestroyWindow(window: ^void): void
external_fn SDL_Delay(ms: u32): void
external_fn SDL_PollEvent(event: ^SDL_Event): i32
external_fn SDL_Quit(): void

layout SDL_Event
  type: 0 u32
  timestamp: 4 u32
  window_event_id: 12 u32
end

fn main(): i32
  let EVENT_QUIT: u32 = (cast u32 256)
  let EVENT_WINDOW: u32 = (cast u32 512)
  let WINDOW_CLOSE: u32 = (cast u32 14)
  let INIT_EVERYTHING: u32 = (cast u32 62001)

  (SDL_SetMainReady)

  let status: i32 = (SDL_Init INIT_EVERYTHING)
  if (ne status (cast i32 0))
    return status
  end

  let window: ^void = (SDL_CreateWindow (cast ^u8 0) 
                                        (cast i32 1) 
                                        (cast i32 1) 
                                        (cast i32 800) 
                                        (cast i32 800) 
                                        (cast u32 0))

  let event: SDL_Event

  loop @game_loop
    loop
      let has_more_events: i32 = (SDL_PollEvent (& event))
      if (not (cast bool has_more_events))
        break
      end

      if (eq event.type EVENT_QUIT)
        break @game_loop
      end

      if (and (eq event.type EVENT_WINDOW) 
              (eq event.window_event_id WINDOW_CLOSE))
        break @game_loop
      end
    end
  end

  (SDL_DestroyWindow window)
  (SDL_Quit)
  
  return (cast i32 0)
end
